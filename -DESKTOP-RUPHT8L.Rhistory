if (f_nrow > 0) {
x <- hline_bottom(x, border = big_border, part = "footer")
even <- seq_len(f_nrow) %% 2 == 0
odd <- !even
x <- bg(x = x, i = odd, bg = odd_header, part = "footer")
x <- bg(x = x, i = even, bg = even_header, part = "footer")
x <- bold(x = x, bold = TRUE, part = "footer")
}
if (b_nrow > 0) {
x <- hline_bottom(x, border = big_border, part = "body")
even <- seq_len(b_nrow) %% 2 == 0
odd <- !even
x <- bg(x = x, i = odd, bg = odd_body, part = "body")
x <- bg(x = x, i = even, bg = even_body, part = "body")
}
x <- font(x, part = "all", fontname = "Times New Roman")
x <- valign(x, valign = "center", part = "all")
x <- align_text_col(x, align = "left", header = TRUE)
x <- align_nottext_col(x, align = "center", header = TRUE)
x <- colformat_double(x, digits = 2)
fix_border_issues(x)
}
data %>%
.[1:20,] %>%
`colnames<-`(as.character(var_label(data))) %>%
flextable() %>%
theme_marty()
#' Precompiles a quick vignette from a computationally expensive report
#'
#' This function takes an R Markdown file that generates a computationally expensive report
#' and turns it into a quicker markdown document.
#'
#' @param input_file The name of the .Rmd file to be precompiled (must include the ".rmd" extension)
#'
#' @return Invisible NULL; the output will be in the same directory as the source named ..._quick.Rmd
#'
#' @references https://ropensci.org/blog/2019/12/08/precompute-vignettes/
#'
#' @export
#' @examples
#' \dontrun{
#' precompile_quick_vignette("example_report.rmd")
#' }
precompile_quick_vignette <- function(input_file) {
bname <- basename(input_file) %>%
sub("^_", "", .) # removes first "_" from filename if it has any
file_name <- substr(bname, 1, nchar(bname)-4)
directory_name <- dirname(input_file)
# Check if file exists
if ( !file.exists(input_file)) {
stop("Error: File does not exist")
} else  if (!(substr(bname, nchar(bname)-3, nchar(bname)) %in%
c(".rmd",".Rmd"))) {
# Check extension
stop("Error: 'file_name' should end with .rmd")
}
# Rename .Rmd into something thats not recognized as Rmd
temp_file_name <- paste0(input_file,".orig")
file.copy( input_file, temp_file_name, overwrite = TRUE)
# Define the filenames
output_file_name <- paste0(directory_name, "/",
file_name, "_quick.rmd")
# knit the original file to de facto .md format
message("Attempting to knit the .Rmd file")
tryCatch({
knitr::knit(temp_file_name, output = output_file_name)
message("Knitting done without errors!")
}, error = function(e) {
stop("The file ran into some problems")
})
}
# input_file <- here::here("inst","cookbook.rmd")
# precompile_quick_vignette(input_file)
# setting up workflow for generating .html **and** .pdf outputs for a file
# Load necessary libraries
require(rmarkdown)
require(pagedown)
#' Compile an R Markdown file to multiple outputs
#'
#' This function takes an R Markdown file as input and generates three outputs:
#' an HTML document, a PDF-like HTML document using the pagedown package, and
#' a PDF document. If generating the PDF document fails (e.g., if Chrome is not
#' installed), the function will still generate the PDF-like HTML document.
#'
#' @param input_file The path to the R Markdown file to be compiled.
#' @param max_wait Max. waittime (minutes) until the pdf finishes printing.
#' Default = 10
#'
#' @return Invisibly returns NULL. The side effect of this function is that
#' it writes the compiled documents to disk (same folder as source).
#'
#' @importFrom rmarkdown render
#' @importFrom pagedown chrome_print
#' @importFrom here here
#' @importFrom base tryCatch
#'
#' @examples
#' \dontrun{
#' compile_rmd_multiple_outputs("path/to/your_file.Rmd")
#' }
#'
#' @export
compile_rmd_multiple_outputs <- function( input_file, max_wait = 10) {
bname <- basename(input_file)
file_name <- substr(bname, 1, nchar(bname)-4)
directory_name <- dirname(input_file)
# Define the output files
output_file_html     <- paste0(directory_name, "/", file_name, ".html")
output_file_pdf_like <- paste0(directory_name, "/", file_name,"_pdflike.html")
output_file_pdf      <- paste0(directory_name, "/", file_name,".pdf")
# Generate a PDF output using pagedown
tryCatch({
# This also leaves the pdflike .html
pagedown::chrome_print(input_file, output = output_file_pdf)
# Renaming output, this will be the pdflike .html version
# Create a progress bar
pb <- progress::progress_bar$new(
format = "Waiting for file: [:bar] :elapsed s",
total = max_wait * 60,  # convert minutes to seconds
width = 60
)
# Start waiting for the file
for(i in 1:(max_wait * 60)) {
if(file.exists(output_file_pdf)) {
message("File found!")
break
}
# If file doesn't exist, wait for 1 second then update the progress bar
Sys.sleep(1)
pb$tick()
}
pb$terminate()
# If the file still doesn't exist after the maximum wait time, print a message
if(!file.exists(output_file_pdf)) {
error("PDF not found after waiting for ", max_wait, " minutes.")
render(input_file, "pagedown::thesis_paged", output_file = output_file_pdf_like)
}
},
error = function(e) {
if(!file.exists(output_file_pdf)) {
print("There was an error!")
render(input_file, "pagedown::thesis_paged", output_file = output_file_pdf_like)
}
})
# renaming output to denote that its the pdf-like one
file.rename( output_file_html, output_file_pdf_like)
# Generate the 'vanilla' HTML output
render(input_file, "html_document", output_file = output_file_html)
}
# input_file <- here::here("inst", "example_thesis", "example-thesis.Rmd")
# compile_rmd_multiple_outputs(input_file)
move_article_to_vignettes <- function( source_file, only_this_step = FALSE) {
# Moves the article from the article's folder
# and updates the relative paths info for the figures
article_filename <- basename(source_file)
source_dir       <- dirname(source_file)
article_dirname  <- basename(source_dir)
# Set target path
target_dirname  <- file.path(here::here(),
"vignettes",
article_dirname)
# Replacing the location in the location_global.r file
location_filename <- here::here(source_dir,
"functions","location_global.r")
# Read the file into a character vector.
lines <- readLines(location_filename)
# Backup to be replaced later
orig_lines <- lines
# Replace the first line.
lines[1] <- paste0('relpath <- here::here("vignettes","',
article_dirname,
'")'
)
# Write the character vector back to the file.
writeLines(lines, location_filename)
# Copies the dir
R.utils::copyDirectory(source_dir,
target_dirname)
# # If it doesn't exist, this will create it
# writeLines(target_dirname, file.path(target_dirname, "_location.txt"))
if (only_this_step == FALSE) {
#wrong filename?
file.path(target_dirname, article_filename) %>%
precompile_quick_vignette() # Precompilation step
quick_filename <-
article_filename %>%
sub("^_", "", .) %>% # removes first "_" if has any from filename
# (precompile...() does it also)
file.path(target_dirname, .) %>%
sub("\\.Rmd$", "_quick.Rmd", .)
print(quick_filename)
compile_rmd_multiple_outputs(quick_filename)  # get pdflike & pdf outputs
sub(".*vignettes/(.*).Rmd", "\\1", quick_filename) %>%
pkgdown::build_article(.) # builds the articles
# Copies the dir with figures, *DOES NOT OVERWRITE NEW HTML*
R.utils::copyDirectory(target_dirname, # origin, eg. Vignettes
file.path(here::here(),
"docs",
"articles",
article_dirname),
overwrite = FALSE)
# Returning the location_global.r to its former state
writeLines(orig_lines, location_filename)
} else {
# Cleanup
# Returning the location_global.r to its former state
writeLines(orig_lines, location_filename)
}
}
# here::here("inst","example_data_import","_data_import.Rmd") %>%
#   move_article_to_vignettes()
# here::here("inst","example_data_import","_data_import.Rmd") %>%
#   move_article_to_vignettes()
here::here("inst","example_data_import","_data_import.Rmd") %>%
move_article_to_vignettes()
here::here("inst","example_data_import","_data_import.Rmd") %>%
move_article_to_vignettes()
source(here::here("inst","functions","load_stuff.r"))
# gets 'relpath'
source(here::here("inst","example_data_import","functions","location_global.r"))
functions_directory <- paste0(relpath, "/functions")
data_directory      <- paste0(relpath, "/data_ext")
fig_directory       <- paste0(relpath, "/figures")
knitr::opts_chunk$set(
echo = TRUE,                           # Ne mutassa a kódokat
cached = FALSE,                 ###!!!  # Ne cache-eljen
warning = FALSE,                        # Ne írja ki a warningokat
message = FALSE,
fig.align = 'center',                   # Ábra középre rendezése
out.width = '90%',                      # Ábra szélessége, alter.: #fig.fullwidth = TRUE,
fig.asp = .75,                          # Ábra Hossz/szélesség
tidy.opts = list(width.cutoff = 60),    # legyenek 60 karakter szélességűre tördelve
tidy = TRUE,#"styler",                        # legyenek clean codingra megformázva
dev = 'png',#'tiff',                            # PNG legyen az alapértelmezett képformátum
compression = 'lzw',
dpi = 300,                              # a PNG képek elég jó minőségűek legyenek
fig.pos = 'H',                          # nem próbálja az ábrákat az oldal tetejére tenni
fig.path = fig_directory                # Ábra kimenet helye
)
descriptor <-
file.path(data_directory,"description.xlsx") %>%
readxl::read_excel(skip = 0)
# make a list to be used as labels for 'labelled::'
labs <-
# take a 1xN matrix
matrix( descriptor$description,
ncol = length(descriptor$description)
) %>%
as.list() %>%
# add column names as 'names'
`names<-`(descriptor$name_new)
# Making the actual dataset
data <- file.path(data_directory,"Iris.xls") %>%
readxl::read_excel( ., skip = 0) %>%
mutate( across( .cols = which( descriptor$trf == "factor"),
.fns = as.factor
),
across( .cols = which( descriptor$trf == "numeric"),
.fns = as.numeric # removing potential '?', 'NA', '.' etc.
),
across( .cols = which( descriptor$trf == "date"),
.fns = as_date # works only if excel recognizes the date..(?)
)
) %>%
`colnames<-`( descriptor$name_new) %>%
labelled::`var_label<-`(   labs  ) %>%
mutate(
# making up a new variable as an example
newvar = petal_width + sepal_width
) %>%
# This is how to set up the labels for new variables
`var_label<-`( list(newvar = "This is my new example variable, adding up petal and sepal width")) %>%
# One of these days I'm gonna learn when to use this
rowwise() %>%
mutate(
mock_ID = runif(1, .1, 20) %>% round
) %>%
set_variable_labels( mock_ID = "Mock ID")
data %>% flextable()
data %>% gtsummary::tbl_summary() %>% flextable()
data %>% gtsummary::tbl_summary() %>% flextable::as_flextable()
data %>% gtsummary::tbl_summary() %>% gtsummary::as_flex_table()
data %>% kable() %>% flextable::flextable()
# setting up workflow for generating .html **and** .pdf outputs for a file
# Load necessary libraries
require(rmarkdown)
require(pagedown)
#' Compile an R Markdown file to multiple outputs
#'
#' This function takes an R Markdown file as input and generates three outputs:
#' an HTML document, a PDF-like HTML document using the pagedown package, and
#' a PDF document. If generating the PDF document fails (e.g., if Chrome is not
#' installed), the function will still generate the PDF-like HTML document.
#'
#' @param input_file The path to the R Markdown file to be compiled.
#' @param max_wait Max. waittime (minutes) until the pdf finishes printing.
#' Default = 10
#'
#' @return Invisibly returns NULL. The side effect of this function is that
#' it writes the compiled documents to disk (same folder as source).
#'
#' @importFrom rmarkdown render
#' @importFrom pagedown chrome_print
#' @importFrom here here
#' @importFrom base tryCatch
#'
#' @examples
#' \dontrun{
#' compile_rmd_multiple_outputs("path/to/your_file.Rmd")
#' }
#'
#' @export
compile_rmd_multiple_outputs <- function( input_file, max_wait = 10) {
bname <- basename(input_file)
file_name <- substr(bname, 1, nchar(bname)-4)
directory_name <- dirname(input_file)
# Define the output files
output_file_html     <- paste0(directory_name, "/", file_name, ".html")
output_file_pdf_like <- paste0(directory_name, "/", file_name,"_pdflike.html")
output_file_pdf      <- paste0(directory_name, "/", file_name,".pdf")
# Generate a PDF output using pagedown
tryCatch({
# This also leaves the pdflike .html
pagedown::chrome_print(input_file, output = output_file_pdf)
# Renaming output, this will be the pdflike .html version
# Create a progress bar
pb <- progress::progress_bar$new(
format = "Waiting for file: [:bar] :elapsed s",
total = max_wait * 60,  # convert minutes to seconds
width = 60
)
# Start waiting for the file
for(i in 1:(max_wait * 60)) {
if(file.exists(output_file_pdf)) {
message("File found!")
break
}
# If file doesn't exist, wait for 1 second then update the progress bar
Sys.sleep(1)
pb$tick()
}
pb$terminate()
# If the file still doesn't exist after the maximum wait time, print a message
if(!file.exists(output_file_pdf)) {
error("PDF not found after waiting for ", max_wait, " minutes.")
render(input_file, "pagedown::thesis_paged", output_file = output_file_pdf_like)
}
},
error = function(e) {
if(!file.exists(output_file_pdf)) {
print("There was an error!")
render(input_file, "pagedown::thesis_paged", output_file = output_file_pdf_like)
}
})
# renaming output to denote that its the pdf-like one
file.rename( output_file_html, output_file_pdf_like)
# Generate the 'vanilla' HTML output
render(input_file, "html_document", output_file = output_file_html)
}
# input_file <- here::here("inst", "example_thesis", "example-thesis.Rmd")
# compile_rmd_multiple_outputs(input_file)
#' Precompiles a quick vignette from a computationally expensive report
#'
#' This function takes an R Markdown file that generates a computationally expensive report
#' and turns it into a quicker markdown document.
#'
#' @param input_file The name of the .Rmd file to be precompiled (must include the ".rmd" extension)
#'
#' @return Invisible NULL; the output will be in the same directory as the source named ..._quick.Rmd
#'
#' @references https://ropensci.org/blog/2019/12/08/precompute-vignettes/
#'
#' @export
#' @examples
#' \dontrun{
#' precompile_quick_vignette("example_report.rmd")
#' }
precompile_quick_vignette <- function(input_file) {
bname <- basename(input_file) %>%
sub("^_", "", .) # removes first "_" from filename if it has any
file_name <- substr(bname, 1, nchar(bname)-4)
directory_name <- dirname(input_file)
# Check if file exists
if ( !file.exists(input_file)) {
stop("Error: File does not exist")
} else  if (!(substr(bname, nchar(bname)-3, nchar(bname)) %in%
c(".rmd",".Rmd"))) {
# Check extension
stop("Error: 'file_name' should end with .rmd")
}
# Rename .Rmd into something thats not recognized as Rmd
temp_file_name <- paste0(input_file,".orig")
file.copy( input_file, temp_file_name, overwrite = TRUE)
# Define the filenames
output_file_name <- paste0(directory_name, "/",
file_name, "_quick.rmd")
# knit the original file to de facto .md format
message("Attempting to knit the .Rmd file")
tryCatch({
knitr::knit(temp_file_name, output = output_file_name)
message("Knitting done without errors!")
}, error = function(e) {
stop("The file ran into some problems")
})
}
# input_file <- here::here("inst","cookbook.rmd")
# precompile_quick_vignette(input_file)
move_article_to_vignettes <- function( source_file, only_this_step = FALSE) {
# Moves the article from the article's folder
# and updates the relative paths info for the figures
article_filename <- basename(source_file)
source_dir       <- dirname(source_file)
article_dirname  <- basename(source_dir)
# Set target path
target_dirname  <- file.path(here::here(),
"vignettes",
article_dirname)
# Replacing the location in the location_global.r file
location_filename <- here::here(source_dir,
"functions","location_global.r")
# Read the file into a character vector.
lines <- readLines(location_filename)
# Backup to be replaced later
orig_lines <- lines
# Replace the first line.
lines[1] <- paste0('relpath <- here::here("vignettes","',
article_dirname,
'")'
)
# Write the character vector back to the file.
writeLines(lines, location_filename)
# Copies the dir
R.utils::copyDirectory(source_dir,
target_dirname)
# # If it doesn't exist, this will create it
# writeLines(target_dirname, file.path(target_dirname, "_location.txt"))
if (only_this_step == FALSE) {
#wrong filename?
file.path(target_dirname, article_filename) %>%
precompile_quick_vignette() # Precompilation step
quick_filename <-
article_filename %>%
sub("^_", "", .) %>% # removes first "_" if has any from filename
# (precompile...() does it also)
file.path(target_dirname, .) %>%
sub("\\.Rmd$", "_quick.Rmd", .)
print(quick_filename)
compile_rmd_multiple_outputs(quick_filename)  # get pdflike & pdf outputs
sub(".*vignettes/(.*).Rmd", "\\1", quick_filename) %>%
pkgdown::build_article(.) # builds the articles
# Copies the dir with figures, *DOES NOT OVERWRITE NEW HTML*
R.utils::copyDirectory(target_dirname, # origin, eg. Vignettes
file.path(here::here(),
"docs",
"articles",
article_dirname),
overwrite = FALSE)
# Returning the location_global.r to its former state
writeLines(orig_lines, location_filename)
} else {
# Cleanup
# Returning the location_global.r to its former state
writeLines(orig_lines, location_filename)
}
}
# here::here("inst","example_data_import","_data_import.Rmd") %>%
#   move_article_to_vignettes()
# here::here("inst","example_data_import","_data_import.Rmd") %>%
#   move_article_to_vignettes()
here::here("inst","example_data_import","_data_import.Rmd") %>%
move_article_to_vignettes()
library(dplyr)
here::here("inst","example_data_import","_data_import.Rmd") %>%
move_article_to_vignettes()
here::here("inst","example_relevel","_relevel_report.Rmd") %>%
move_article_to_vignettes()
pkgdown::build_site()
View(move_article_to_vignettes)
pkgdown::build_site()
devtools::document()
install.packages(devtools)
install.packages("devtools")
renv::install("devtools")
devtools::document()
warnings()
devtools::test()
pkgdown::build_site()
pkgdown::build_site()
devtools::check(document = FALSE, vignettes = FALSE)
devtools::check(document = FALSE, vignettes = FALSE)
devtools::check(document = FALSE, vignettes = FALSE)
renv::snapshot()
renv::status()
renv::snapshot()
devtools::check(document = FALSE, vignettes = FALSE)
devtools::document()
devtools::check(document = FALSE, vignettes = FALSE)
devtools::check(document = FALSE, vignettes = FALSE)
install.packages("renv")
renv:::init()
renv::purge()
renv::purge("renv")
install.packages("renv")
install.packages("renv")
install.packages("renv")
renv::deactivate()
renv::init()
renv::init()
library(Martysbloodsugar)
detach("package:Martysbloodsugar", unload = TRUE)
library(Martysbloodsugar)
renv::init()
